source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
# Decision Tree Classification using the Rpart package
pkgs <- c("rpart", "rpart.plot", "party", "randomForest", "e1071")
library(pkgconfig)
library(rpart)
# CUSTOMIZE DATA FILE: Define data file
ds <- "tmdb_5000_movies.csv"
movies <- read.csv(ds,sep=",")
str(movies)
# Define columns
names(movies) <- c("budget", "genres", "homepage", "id", "keywords", "original_language", "original_title", "overview", "popularity", "production_companies", "production_countries", "release_date", "revenue", "runtime", "spoken_languages", "status", "tagline", "title", "vote_average", "vote_count")
movies$profit <-movies$revenue-movies$budget
#0 = losing money 1 = profitable
movies$target <- ifelse(movies$profit > 0, 1, 0)
# CUSTOMIZE DATA FILE: The categorical dependent variable is called target
# movies$target_profit <- factor(df$target_profit, levels=c(0,1),
#                     labels=c("losing money", "profitable"))
# Define seed for random number generator
set.seed(1234)
# sample takes a random sample of the specified size from the elements of x
train <- sample(nrow(movies), 0.7*nrow(movies))
head(train)
# Define training data frame using random sample of observations
movies.train <- movies[train,]
# Define validation data frame using all observations not in training data frame
movies.validate <- movies[-train,]
# CUSTOMIZE DATA: Table counts the observations for each categorical value of target
# CUSTOMIZE DATA: The categorical dependent variable is called target
table(movies.train$target)
table(movies.validate$target)
# Decision Tree
library(rpart)
set.seed(1234)
dtree <- rpart(target ~ ., data=df.train, method="class",
parms=list(split="information"))
summary(dtree)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
''
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
View(movies.train)
View(movies)
View(movies.train)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
View(movies)
View(movies.train)
View(movies.validate)
View(movies1)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
dtree$cptable
plotcp(dtree)
opt <- which.min(dtree$cptable[,"xerror"])
cp <- dtree$cptable[opt, "CP"]
dtree.pruned <- prune(dtree, cp)
plot(dtree.pruned);text(dtree.pruned)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
View(movies)
View(movies.train)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
View(movies)
View(movies.train)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
xdtree$cptable
dtree$cptable
plotcp(dtree)
opt <- which.min(dtree$cptable[,"xerror"])
cp <- dtree$cptable[opt, "CP"]
dtree.pruned <- prune(dtree, cp)
plot(dtree.pruned);text(dtree.pruned)
class(dtree$cptable)
names(dtree)
library(rpart.plot)
table(df.train$target)/nrow(df.train)
table(df.movies1$target)/nrow(movies1.train)
table(movies1.train$target)/nrow(movies1.train)
prp(dtree.pruned, type=2, extra=104, fallen.leaves=TRUE, main="Decision Tree")
dtree.pred <- predict(dtree.pruned, df.validate, type="class")
dtree.pred <- predict(dtree.pruned, movies1.validate, type="class")
dtree.perf <- table(movies1.validate$target, dtree.pred, dnn=c("Actual", "Predicted"))
dtree.perf
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
library(ggplot2)
a <- ggplot(movies1, aes(target, budget_group))
a + geom_bar()
a + geom_jitter()
a + geom_jitter(color = 'blue')
a + geom_jitter(color = 'blue', title = "Plot of target versus Budget")
a + geom_jitter(color = 'blue') + ggtitle("Plot of target versus Budget")
b <- ggplot(movies1, aes(target, vote_group)) + geom_jitter(color = 'red') + ggtitle("Plot Versus Vote Group")
print(b)
c <- ggplot(movies1, aes(budget, vote_group)) + geom_jitter(color = 'green') + ggtitle("Budget vs Vote Group")
print(c)
c <- ggplot(movies1, aes(budget_group, vote_group)) + geom_jitter(color = 'green') + ggtitle("Budget vs Vote Group")
print(c)
c <- ggplot(movies1, aes(budget_group, vote_group)) + geom_jitter(color = 'dark green') + ggtitle("Budget vs Vote Group")
print(c)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
c <- ggplot(movies1, aes(budget_group, vote_group)) + geom_jitter(color = 'dark green') + ggtitle("Budget vs Vote Group")
print(c)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
a <- ggplot(movies1, aes(budget_group, profit)) + geom_bar(color = 'purple')
print(a)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
# Decision Tree Classification using the Rpart package
pkgs <- c("rpart", "rpart.plot", "party", "randomForest", "e1071")
library(pkgconfig)
library(rpart)
# CUSTOMIZE DATA FILE: Define data file
ds <- "tmdb_5000_movies.csv"
# movies <- read.csv(ds,sep=",")
movies <- read.csv(ds,sep=",", colClasses=c(NA, "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", NA, "NULL", "NULL", "NULL", NA, "NULL", "NULL", NA, "NULL", "NULL", NA, "NULL"))
movies <- na.omit(movies)
str(movies)
# Define columns
# names(movies) <- c("budget", "genres", "homepage", "id", "keywords", "original_language", "original_title", "overview", "popularity", "production_companies", "production_countries", "release_date", "revenue", "runtime", "spoken_languages", "status", "tagline", "title", "vote_average", "vote_count")
# names(movies) <- c("budget", "revenue")
movies$profit <-movies$revenue-movies$budget
str(movies)
head(movies)
#0 = losing money 1 = profitable
movies$target <- ifelse(movies$profit > 0, 1, 0)
# CUSTOMIZE DATA FILE: The categorical dependent variable is called target
#movies$target_profit <- factor(df$target_profit, levels=c(0,1),
#                     labels=c("losing money", "profitable"))
#Convert movies to numeric
movies1<-sapply(movies,function(x) as.numeric(as.character(x)))
movies1=as.data.frame(movies1)
#Drop revenue, vote_average, and profit
movies1 <- movies[-4]
#Create buckets for budget, language, status, popularity, vote average, and profit
library(dplyr)
movies1 <- mutate(movies1, budget_group = ifelse(budget>=0 & budget<1000000, "Less than $1mil",
ifelse(budget>=1000000 & budget < 10000000,"$1mil-$10 mil",
ifelse(budget>=10000000 & budget<100000000,"$10mil-$100mil",
ifelse(budget>=100000000,"Greater than $100mil", "N/A")))))
movies1 <- mutate(movies1, popularity_group = ifelse(popularity>=0 & popularity<10, "Popularity less than 10",
ifelse(popularity>=10 & popularity < 20,"Popularity between 10 and 20",
ifelse(popularity>=20 & popularity<100,"Popularity between 20 and 100",
ifelse(popularity>=100,"Popularity greater than 100", "N/A")))))
movies1 <- mutate(movies1, vote_group = ifelse(vote_average>=0 & vote_average<4, "Vote average less than 4",
ifelse(vote_average>=4 & vote_average < 6,"Vote average between 4 and 6",
ifelse(vote_average>=6 & vote_average<8,"Vote average between 6 and 8",
ifelse(vote_average>=8,"Vote average greater than 8", "N/A")))))
head(movies1)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
a <- ggplot(movies1, aes(vote_group, profit)) + geom_bar(color = 'purple')
print(a)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
a <- ggplot(movies1, aes(vote_group, profit)) + geom_bar(color = 'purple')
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
a <- ggplot(movies1, aes(vote_group, profit)) + geom_bar(color = 'purple')
print(a)
a <- ggplot(movies1, aes(vote_group, profit)) + geom_boxplot(color = 'purple')
print(a)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
a <- ggplot(movies1, aes(vote_group, profit)) + geom_boxplot(color = 'purple')
print(a)
c <- ggplot(movies1, aes(budget_group, vote_group)) + geom_jitter(color = 'dark green') + ggtitle("Budget vs Vote Group")
print(c)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
c <- ggplot(movies1, aes(budget_group, vote_group)) + geom_jitter(color = 'dark green') + ggtitle("Budget vs Vote Group")
print(c)
source('~/Desktop/Project 4 TMDB/Classification.R', echo=TRUE)
